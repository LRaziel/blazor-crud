@inherits LayoutComponentBase
@inject AuthService usr
@inject IJSRuntime js
@inject IDbContextFactory<BlazorCrud.Data.AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<div class="page">
    <main>
        <div class="top-row px-4">
            <img src="bemol-logo.svg" alt="Logo" class="logo" />
            @if(usr.Authentication != null && usr.Authentication.IsAuthenticated)
            {
			    <a href="" @onclick:preventDefault @onclick="@Logout"><i class="bi bi-box-arrow-left"></i></a>
			}
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await CheckUserAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await CheckUserAsync();
        await base.OnAfterRenderAsync(firstRender);
    }

    private  Task CheckUserAsync()
    {

        var login = NavigationManager.BaseUri + "login";
        var register = NavigationManager.BaseUri + "users/create";

        if (
            (NavigationManager.Uri != login && NavigationManager.Uri != register) && 
            (usr.Authentication == null || !usr.Authentication.IsAuthenticated)
        )
        {
            NavigationManager.NavigateTo("/login");
        }
        return Task.CompletedTask;
    }

    private async Task Logout()
    {
        using var context = DbFactory.CreateDbContext();
        usr.Authentication.IsAuthenticated = false;
        context.Users.Update(usr.Authentication);
        await context.SaveChangesAsync();
        usr.Authentication = null;
        await InvokeAsync(StateHasChanged);
    }
}